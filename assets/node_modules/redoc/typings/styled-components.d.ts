import * as styledComponents from 'styled-components';
import { ResolvedThemeInterface } from './theme';
export { ResolvedThemeInterface };
declare const styled: styledComponents.ThemedBaseStyledInterface<ResolvedThemeInterface>, css: styledComponents.BaseThemedCssFunction<ResolvedThemeInterface>, createGlobalStyle: <P extends object = {}>(first: string | number | false | TemplateStringsArray | styledComponents.CSSObject | styledComponents.Keyframes | Pick<styledComponents.StyledComponentBase<any, any, any, any>, "defaultProps" | "displayName" | "$$typeof" | "withComponent"> | Pick<styledComponents.StyledComponentBase<any, any, any, never>, "defaultProps" | "displayName" | "$$typeof" | "withComponent"> | styledComponents.FlattenInterpolation<styledComponents.ThemedStyledProps<P, ResolvedThemeInterface>> | styledComponents.InterpolationFunction<styledComponents.ThemedStyledProps<P, ResolvedThemeInterface>>, ...interpolations: styledComponents.Interpolation<styledComponents.ThemedStyledProps<P, ResolvedThemeInterface>>[]) => styledComponents.GlobalStyleComponent<P, ResolvedThemeInterface>, keyframes: {
    (strings: TemplateStringsArray | styledComponents.CSSKeyframes, ...interpolations: styledComponents.SimpleInterpolation[]): styledComponents.Keyframes;
    (strings: string[] | TemplateStringsArray, ...interpolations: styledComponents.SimpleInterpolation[]): styledComponents.Keyframes;
}, ThemeProvider: import("react").ComponentClass<styledComponents.ThemeProviderProps<ResolvedThemeInterface, ResolvedThemeInterface>, any>;
export declare const media: {
    lessThan(breakpoint: any, print?: boolean | undefined): (...args: any[]) => styledComponents.FlattenInterpolation<styledComponents.ThemeProps<ResolvedThemeInterface>>;
    greaterThan(breakpoint: any): (...args: any[]) => styledComponents.FlattenInterpolation<styledComponents.ThemeProps<ResolvedThemeInterface>>;
    between(firstBreakpoint: any, secondBreakpoint: any): (...args: any[]) => styledComponents.FlattenInterpolation<styledComponents.ThemeProps<ResolvedThemeInterface>>;
};
export { css, createGlobalStyle, keyframes, ThemeProvider };
export default styled;
export declare function extensionsHook(styledName: string): (props: any) => any;
